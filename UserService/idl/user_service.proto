syntax = "proto3";

package client;

import "user_api.proto";

option go_package = "client";

message UserInfo {
    int64 id = 1; // 用户id
    string name = 2; // 用户名称
    int64 follow_count = 3; // 关注总数
    int64 follower_count = 4; // 粉丝总数
    bool is_follow = 5; // true-已关注，false-未关注
    string avatar = 6; //用户头像
    string background_image = 7; //用户个人页顶部大图
    string signature = 8; //个人简介
    int64 total_favorited = 9; //获赞数量
    int64 work_count = 10; //作品数量
    int64 favorite_count = 11; //点赞数量
}

message user_register_req {
    string username = 1[(api.body) = "username"]; // 注册用户名，最长32个字符
    string password = 2[(api.body) = "password"]; // 密码，最长32个字符
}

message user_register_resp {
    int32 status_code = 1; // 状态码，0-成功，其他值-失败
    string status_msg = 2; // 返回状态描述
    int64 user_id = 3; // 用户id
}

message user_login_req {
    string username = 1[(api.body) = "username"]; // 登录用户名
    string password = 2[(api.body) = "password"]; // 登录密码
}

message user_login_resp {
    int32 status_code = 1; // 状态码，0-成功，其他值-失败
    string status_msg = 2; // 返回状态描述
    int64 user_id = 3; // 用户id
}

message user_info_req {
    int64 user_id = 1[(api.body) = "user_id"]; // 用户id
}

message user_info_resp {
    int32 status_code = 1; // 状态码，0-成功，其他值-失败
    string status_msg = 2; // 返回状态描述
    UserInfo user = 3; // 用户信息
}

message PairValue {
    string key = 1; // 键
    string value = 2; // 值
}

message user_update_req {
    int64 user_id = 1[(api.body) = "user_id"]; // 用户信息
    repeated PairValue ext = 2[(api.body) = "ext"]; // 扩展信息
}

message user_update_resp {
    int32 status_code = 1; // 状态码，0-成功，其他值-失败
    string status_msg = 2; // 返回状态描述
    string modify_time = 3; // 修改时间
}



service UserService {
    rpc Register(user_register_req) returns (user_register_resp) {
        option (api.post) = "/internal/user/register";
    }
    rpc Login(user_login_req) returns (user_login_resp) {
        option (api.post) = "/internal/user/login";
    }
    rpc UserInfo(user_info_req) returns (user_info_resp) {
        option (api.post) = "/internal/user/info";
    }
    rpc UserUpdate(user_update_req) returns (user_update_resp) {
        option (api.post) = "/internal/user/update";
    }
}

