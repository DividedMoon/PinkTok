// Code generated by hertz generator.

package handler

import (
	"context"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"user_service/biz/internal/constant"
	utils "user_service/biz/internal/util"
	"user_service/biz/model/dto"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	client "user_service/biz/model/client"
)

// Login .
// @router /internal/user/login [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var (
		err error
		req client.UserLoginReq
	)
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusOK, &client.UserLoginResp{
			StatusCode: constant.ServiceErrCode,
			StatusMsg:  err.Error(),
			UserId:     -1,
		})
		return
	}
	user := new(dto.User)
	hlog.CtxInfof(ctx, "Try to login with user = %+v", req.Username)
	err = user.SelectByUsername(req.Username)
	if err != nil {
		hlog.CtxErrorf(ctx, "SelectByUsername failed, err = %+v", err)

		c.JSON(consts.StatusOK, &client.UserLoginResp{
			StatusCode: constant.ServiceErrCode,
			StatusMsg:  err.Error(),
			UserId:     -1,
		})
		return
	}
	if !utils.VerifyPassword(req.Password, user.Password) {
		hlog.CtxErrorf(ctx, "Password is not verified")
		c.JSON(consts.StatusOK, &client.UserLoginResp{
			StatusCode: constant.AuthorizationFailedErrCode,
			StatusMsg:  constant.PasswordIsNotVerifiedMsg,
			UserId:     -1,
		})
		return
	}
	hlog.CtxInfof(ctx, "Login success, user = %+v", user.UserName)
	c.JSON(consts.StatusOK, &client.UserLoginResp{
		StatusCode: constant.SuccessCode,
		StatusMsg:  constant.SuccessMsg,
		UserId:     user.ID,
	})
}
