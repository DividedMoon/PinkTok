// Code generated by hertz generator.

package handler

import (
	"context"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"strconv"
	"user_service/biz/internal/constant"
	"user_service/biz/internal/service"
	utils "user_service/biz/internal/util"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	client "user_service/biz/model/client"
)

// UserUpdate .
// @router /internal/user/update [POST]
func UserUpdate(ctx context.Context, c *app.RequestContext) {
	defer func() {
		if r := recover(); r != nil {
			c.JSON(consts.StatusInternalServerError, &utils.BaseResp{
				StatusCode: constant.ServiceErrCode,
				StatusMsg:  constant.ServerErrMsg,
			})
		}

	}()
	var (
		err error
		req client.UserUpdateReq
	)

	err = c.BindAndValidate(&req)
	if err != nil {
		resp := utils.BuildBaseResp(err)
		hlog.CtxErrorf(ctx, "BindAndValidate err: %v", err)
		c.JSON(consts.StatusBadRequest, &client.UserUpdateResp{
			StatusCode: resp.StatusCode,
			StatusMsg:  resp.StatusMsg,
		})
		return
	}

	info, err := service.GetUserInfo(req.UserId)
	if err != nil {
		resp := utils.BuildBaseResp(err)
		hlog.CtxErrorf(ctx, "GetUserInfo err: %v", err)
		c.JSON(consts.StatusBadRequest, &client.UserUpdateResp{
			StatusCode: resp.StatusCode,
			StatusMsg:  resp.StatusMsg,
		})
		return
	}

	changes, err := generateChangesFromExt(req.Ext)
	if err != nil {
		hlog.CtxErrorf(ctx, "strconv.ParseInt err: %v", err)
		c.JSON(consts.StatusOK, &client.UserUpdateResp{
			StatusCode: constant.ParamErr.ErrCode,
			StatusMsg:  err.Error(),
		})
		return
	}

	time, err := service.UpdateUserInfo(info, changes)
	if err != nil {
		hlog.CtxErrorf(ctx, "UpdateUserInfo err: %v", err)
		resp := utils.BuildBaseResp(err)
		c.JSON(consts.StatusOK, &client.UserUpdateResp{
			StatusCode: resp.StatusCode,
			StatusMsg:  resp.StatusMsg,
		})
		return
	}
	hlog.CtxInfof(ctx, "UpdateUserInfo success, time: %v", time)
	c.JSON(consts.StatusOK, &client.UserUpdateResp{
		StatusCode: constant.SuccessCode,
		StatusMsg:  constant.SuccessMsg,
		ModifyTime: time,
	})
}

func generateChangesFromExt(lists []*client.PairValue) (map[string]int, error) {
	changes := make(map[string]int)
	for _, v := range lists {
		change, err := strconv.ParseInt(v.GetValue(), 10, 32)
		if err != nil {
			return nil, err
		}
		changes[v.GetKey()] = int(change)
	}
	return changes, nil
}
