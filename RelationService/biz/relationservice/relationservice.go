// Code generated by Kitex v0.6.2. DO NOT EDIT.

package relationservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
	"relation_service/biz"
)

func serviceInfo() *kitex.ServiceInfo {
	return relationServiceServiceInfo
}

var relationServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "RelationService"
	handlerType := (*biz.RelationService)(nil)
	methods := map[string]kitex.MethodInfo{
		"SendRelationAction": kitex.NewMethodInfo(sendRelationActionHandler, newSendRelationActionArgs, newSendRelationActionResult, false),
		"GetFollowList":      kitex.NewMethodInfo(getFollowListHandler, newGetFollowListArgs, newGetFollowListResult, false),
		"GetFollowerList":    kitex.NewMethodInfo(getFollowerListHandler, newGetFollowerListArgs, newGetFollowerListResult, false),
		"GetFriendList":      kitex.NewMethodInfo(getFriendListHandler, newGetFriendListArgs, newGetFriendListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "relation_service",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func sendRelationActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(biz.RelationActionReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(biz.RelationService).SendRelationAction(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SendRelationActionArgs:
		success, err := handler.(biz.RelationService).SendRelationAction(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SendRelationActionResult)
		realResult.Success = success
	}
	return nil
}
func newSendRelationActionArgs() interface{} {
	return &SendRelationActionArgs{}
}

func newSendRelationActionResult() interface{} {
	return &SendRelationActionResult{}
}

type SendRelationActionArgs struct {
	Req *biz.RelationActionReq
}

func (p *SendRelationActionArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(biz.RelationActionReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SendRelationActionArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SendRelationActionArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SendRelationActionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in SendRelationActionArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *SendRelationActionArgs) Unmarshal(in []byte) error {
	msg := new(biz.RelationActionReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SendRelationActionArgs_Req_DEFAULT *biz.RelationActionReq

func (p *SendRelationActionArgs) GetReq() *biz.RelationActionReq {
	if !p.IsSetReq() {
		return SendRelationActionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SendRelationActionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SendRelationActionArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SendRelationActionResult struct {
	Success *biz.RelationActionResp
}

var SendRelationActionResult_Success_DEFAULT *biz.RelationActionResp

func (p *SendRelationActionResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(biz.RelationActionResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SendRelationActionResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SendRelationActionResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SendRelationActionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in SendRelationActionResult")
	}
	return proto.Marshal(p.Success)
}

func (p *SendRelationActionResult) Unmarshal(in []byte) error {
	msg := new(biz.RelationActionResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SendRelationActionResult) GetSuccess() *biz.RelationActionResp {
	if !p.IsSetSuccess() {
		return SendRelationActionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SendRelationActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*biz.RelationActionResp)
}

func (p *SendRelationActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SendRelationActionResult) GetResult() interface{} {
	return p.Success
}

func getFollowListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(biz.RelationFollowListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(biz.RelationService).GetFollowList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFollowListArgs:
		success, err := handler.(biz.RelationService).GetFollowList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFollowListResult)
		realResult.Success = success
	}
	return nil
}
func newGetFollowListArgs() interface{} {
	return &GetFollowListArgs{}
}

func newGetFollowListResult() interface{} {
	return &GetFollowListResult{}
}

type GetFollowListArgs struct {
	Req *biz.RelationFollowListReq
}

func (p *GetFollowListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(biz.RelationFollowListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFollowListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFollowListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFollowListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetFollowListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetFollowListArgs) Unmarshal(in []byte) error {
	msg := new(biz.RelationFollowListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFollowListArgs_Req_DEFAULT *biz.RelationFollowListReq

func (p *GetFollowListArgs) GetReq() *biz.RelationFollowListReq {
	if !p.IsSetReq() {
		return GetFollowListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFollowListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetFollowListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetFollowListResult struct {
	Success *biz.RelationFollowListResp
}

var GetFollowListResult_Success_DEFAULT *biz.RelationFollowListResp

func (p *GetFollowListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(biz.RelationFollowListResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFollowListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFollowListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFollowListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetFollowListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetFollowListResult) Unmarshal(in []byte) error {
	msg := new(biz.RelationFollowListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFollowListResult) GetSuccess() *biz.RelationFollowListResp {
	if !p.IsSetSuccess() {
		return GetFollowListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFollowListResult) SetSuccess(x interface{}) {
	p.Success = x.(*biz.RelationFollowListResp)
}

func (p *GetFollowListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFollowListResult) GetResult() interface{} {
	return p.Success
}

func getFollowerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(biz.RelationFollowerListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(biz.RelationService).GetFollowerList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFollowerListArgs:
		success, err := handler.(biz.RelationService).GetFollowerList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFollowerListResult)
		realResult.Success = success
	}
	return nil
}
func newGetFollowerListArgs() interface{} {
	return &GetFollowerListArgs{}
}

func newGetFollowerListResult() interface{} {
	return &GetFollowerListResult{}
}

type GetFollowerListArgs struct {
	Req *biz.RelationFollowerListReq
}

func (p *GetFollowerListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(biz.RelationFollowerListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFollowerListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFollowerListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFollowerListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetFollowerListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetFollowerListArgs) Unmarshal(in []byte) error {
	msg := new(biz.RelationFollowerListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFollowerListArgs_Req_DEFAULT *biz.RelationFollowerListReq

func (p *GetFollowerListArgs) GetReq() *biz.RelationFollowerListReq {
	if !p.IsSetReq() {
		return GetFollowerListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFollowerListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetFollowerListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetFollowerListResult struct {
	Success *biz.RelationFollowerListResp
}

var GetFollowerListResult_Success_DEFAULT *biz.RelationFollowerListResp

func (p *GetFollowerListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(biz.RelationFollowerListResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFollowerListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFollowerListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFollowerListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetFollowerListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetFollowerListResult) Unmarshal(in []byte) error {
	msg := new(biz.RelationFollowerListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFollowerListResult) GetSuccess() *biz.RelationFollowerListResp {
	if !p.IsSetSuccess() {
		return GetFollowerListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFollowerListResult) SetSuccess(x interface{}) {
	p.Success = x.(*biz.RelationFollowerListResp)
}

func (p *GetFollowerListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFollowerListResult) GetResult() interface{} {
	return p.Success
}

func getFriendListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(biz.RelationFriendListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(biz.RelationService).GetFriendList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFriendListArgs:
		success, err := handler.(biz.RelationService).GetFriendList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFriendListResult)
		realResult.Success = success
	}
	return nil
}
func newGetFriendListArgs() interface{} {
	return &GetFriendListArgs{}
}

func newGetFriendListResult() interface{} {
	return &GetFriendListResult{}
}

type GetFriendListArgs struct {
	Req *biz.RelationFriendListReq
}

func (p *GetFriendListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(biz.RelationFriendListReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFriendListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFriendListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFriendListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetFriendListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetFriendListArgs) Unmarshal(in []byte) error {
	msg := new(biz.RelationFriendListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFriendListArgs_Req_DEFAULT *biz.RelationFriendListReq

func (p *GetFriendListArgs) GetReq() *biz.RelationFriendListReq {
	if !p.IsSetReq() {
		return GetFriendListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFriendListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetFriendListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetFriendListResult struct {
	Success *biz.RelationFriendListResp
}

var GetFriendListResult_Success_DEFAULT *biz.RelationFriendListResp

func (p *GetFriendListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(biz.RelationFriendListResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFriendListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFriendListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFriendListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetFriendListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetFriendListResult) Unmarshal(in []byte) error {
	msg := new(biz.RelationFriendListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFriendListResult) GetSuccess() *biz.RelationFriendListResp {
	if !p.IsSetSuccess() {
		return GetFriendListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFriendListResult) SetSuccess(x interface{}) {
	p.Success = x.(*biz.RelationFriendListResp)
}

func (p *GetFriendListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFriendListResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SendRelationAction(ctx context.Context, Req *biz.RelationActionReq) (r *biz.RelationActionResp, err error) {
	var _args SendRelationActionArgs
	_args.Req = Req
	var _result SendRelationActionResult
	if err = p.c.Call(ctx, "SendRelationAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowList(ctx context.Context, Req *biz.RelationFollowListReq) (r *biz.RelationFollowListResp, err error) {
	var _args GetFollowListArgs
	_args.Req = Req
	var _result GetFollowListResult
	if err = p.c.Call(ctx, "GetFollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowerList(ctx context.Context, Req *biz.RelationFollowerListReq) (r *biz.RelationFollowerListResp, err error) {
	var _args GetFollowerListArgs
	_args.Req = Req
	var _result GetFollowerListResult
	if err = p.c.Call(ctx, "GetFollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFriendList(ctx context.Context, Req *biz.RelationFriendListReq) (r *biz.RelationFriendListResp, err error) {
	var _args GetFriendListArgs
	_args.Req = Req
	var _result GetFriendListResult
	if err = p.c.Call(ctx, "GetFriendList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
