// Code generated by hertz generator.

package handler

import (
	"context"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"relation_service/biz/internal/constant"
	"relation_service/biz/internal/service"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"relation_service/biz/model/client"
)

// SendRelationAction .
// @router /internal/relation/action [POST]
func SendRelationAction(ctx context.Context, c *app.RequestContext) {
	var (
		err error
		req client.RelationActionReq
	)

	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusOK, &client.RelationActionResp{
			StatusCode: constant.ServiceErrCode,
			StatusMsg:  err.Error(),
		})
		return
	}
	if constant.Action_Type_Submit_Follow == req.ActionType {
		err = service.SubmitFollowRelationAction(ctx, &req)
	} else if constant.Action_Type_Cancel_Follow == req.ActionType {
		err = service.CancelFollowRelationAction(ctx, &req)
	} else {
		hlog.CtxErrorf(ctx, "Send err action type: %v", req.ActionType)
		c.JSON(consts.StatusOK, &client.RelationActionResp{
			StatusCode: constant.InvalidActionTypeCode,
			StatusMsg:  constant.InvalidActionTypeMsg,
		})
		return
	}
	if err != nil {
		hlog.CtxErrorf(ctx, "SendRelationAction err: %v", err)
		c.JSON(consts.StatusOK, &client.RelationActionResp{
			StatusCode: constant.ServiceErrCode,
			StatusMsg:  err.Error(),
		})
		return
	}

	c.JSON(consts.StatusOK, &client.RelationActionResp{
		StatusCode: constant.SuccessCode,
		StatusMsg:  constant.SuccessMsg,
	})
}
